#! /bin/sh

# The Docker App Container's development entrypoint.
# This is a script used by the project's Docker development environment to
# setup the app containers and databases upon runnning.
# set -e

: ${APP_PATH:=${PWD}}
: ${APP_TEMP_PATH:="$APP_PATH/tmp"}
: ${APP_SETUP_LOCK:="$APP_TEMP_PATH/setup.lock"}
: ${APP_SETUP_WAIT:="5"}

# Define the functions lock and unlock our app containers setup processes:
lock_setup() { mkdir -p $APP_TEMP_PATH && touch $APP_SETUP_LOCK; }
unlock_setup() { rm -rf $APP_SETUP_LOCK; }
wait_setup() { echo "Waiting for app setup to finish..."; sleep $APP_SETUP_WAIT; }

ensure_node_modules_are_installed() {
  if [ "$(stat -c '%U' node_modules)" != "$(whoami)" ]
  then sudo chown -R $(whoami) node_modules
  fi

  yarn check --integrity || yarn install
}

ensure_tmp_directory_belongs_to_user() {
  if [ "$(stat -c '%U' tmp)" != "$(whoami)" ]
  then sudo chown -R $(whoami) tmp
  fi
}

# 'Unlock' the setup process if the script exits prematurely:
trap unlock_setup HUP INT QUIT KILL TERM EXIT

# 7: Specify a default command, in case it wasn't issued:
if [ -z "$1" ]; then set -- yarn dev "$@"; fi

ensure_tmp_directory_belongs_to_user

if [ "$1" = "npm" ] || [ "$1" = "yarn" ] || [ "$1" = "vscode-wait" ]
then
  # Wait until the setup 'lock' file no longer exists:
  while [ -f $APP_SETUP_LOCK ]; do wait_setup; done

  lock_setup

  ensure_node_modules_are_installed

  unlock_setup
fi

# Convertir el comando de "vscode-wait" a un loop infinito:
if [ "$1" = "vscode-wait" ]; then set -- /bin/sh -c "while sleep 1000; do :; done"; fi

# Execute the given or default command:
exec "$@"